// The implementation of this idea was generated by Gemini 2.5 Pro : https://aistudio.google.com/app/prompts?state=%7B%22ids%22:%5B%221YlYTn7IZlwfaUgD8CrjS8Go8TOlDBj1d%22%5D,%22action%22:%22open%22,%22userId%22:%22108593051934579297280%22,%22resourceKeys%22:%7B%7D%7D&usp=sharing, https://drive.google.com/file/d/1hHfqu1NaRqDCCKylE4jvEJl75hKdoy_E/view?usp=sharing
import { NextResponse } from "next/server";

// The master prompt we designed. Keep it here for clarity.
const PROMPT_TEMPLATE = `
SYSTEM: You are an intelligent dispatcher for a local services platform. Your job is to analyze text from either a customer describing a problem or a local expert describing their services. You must extract the key information into a structured JSON format.

You MUST follow these rules:
1.  **You will receive input in English, Filipino, or Taglish (a mix). Your output keywords MUST ALWAYS be in normalized, lowercase English.**
2.  Extract information into the predefined categories: "primary_trade", "specific_services", and "qualities".
3.  For "primary_trade", identify the main job category (e.g., "Plumber", "Electrician").
4.  For "specific_services", list the concrete tasks. **Normalize the language.** For example, "my sink is clogged" or "barado ang lababo" should both become "drain cleaning".
5.  For "qualities", extract attributes that build trust, like "licensed", "reliable", "mura" (affordable), or "24/7 service".
6.  If a category is empty, return an empty list \`[]\`.
7.  Output ONLY the JSON object and nothing else.

--- EXAMPLE 1: Taglish Customer Request ---
[INPUT TEXT]
"Hi po, barado po kasi yung toilet namin. At saka, kailangan ko rin magpakabit ng bagong bumbilya sa kusina, medyo mataas kasi."
[YOUR JSON OUTPUT]
{
  "primary_trade": ["plumber", "electrician", "handyman"],
  "specific_services": ["clogged toilet repair", "light bulb replacement"],
  "qualities": []
}

--- EXAMPLE 2: Taglish Partner Profile ---
[INPUT TEXT]
"Ako po si Mang Bert, isang karpintero. Gumagawa ako ng mga custom na cabinet at nag-aassemble din ng furniture galing IKEA. Maasahan at mabilis gumawa."
[YOUR JSON OUTPUT]
{
  "primary_trade": ["carpenter"],
  "specific_services": ["custom cabinets", "furniture assembly"],
  "qualities": ["reliable", "fast service"]
}
--- END EXAMPLES ---

Now, analyze the following text and generate the JSON output.

[INPUT TEXT]
{{user_text}}
`;

export async function POST(req) {
	try {
		// 1. Get the user's text from the request body
		const body = await req.json();
		const inputText = body.text;

		if (!inputText) {
			return NextResponse.json({ error: "Text input is required" }, { status: 400 });
		}

		// 2. Construct the full prompt
		const fullPrompt = PROMPT_TEMPLATE.replace("{{user_text}}", inputText);

		// 3. Prepare the request payload for Ollama
		const ollamaPayload = {
			model: "phi3",
			messages: [
				{
					role: "user",
					content: fullPrompt,
				},
			],
			format: "json", // Ask for JSON format directly for better reliability
			stream: false, // We want the full response at once
			options: {
				temperature: 0.0, // Set to 0 for maximum consistency
			},
		};

		// 4. Send the request to your local Ollama server
		const ollamaResponse = await fetch("http://laptop-ollama.cjuy.dev/api/chat", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify(ollamaPayload),
		});

		if (!ollamaResponse.ok) {
			const errorText = await ollamaResponse.text();
			console.error("Ollama API Error:", errorText);
			return NextResponse.json(
				{ error: "Failed to get response from Ollama", details: errorText },
				{ status: 500 },
			);
		}

		const ollamaData = await ollamaResponse.json();

		// 5. The model's response is a JSON string. We need to parse it.
		// The `format: 'json'` option in the payload helps ensure this is valid.
		const rawContent = ollamaData.message.content;
		const keywords = JSON.parse(rawContent);

		// 6. Send the structured keywords back to the frontend
		return NextResponse.json(keywords, { status: 200 });
	} catch (error) {
		console.error("Error in generate-keywords API:", error);
		// Check if it's a JSON parsing error
		if (error instanceof SyntaxError) {
			return NextResponse.json(
				{ error: "Failed to parse JSON from model response." },
				{ status: 500 },
			);
		}
		return NextResponse.json({ error: "An internal server error occurred" }, { status: 500 });
	}
}
